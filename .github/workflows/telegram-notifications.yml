name: Telegram Notifications

# Trigger workflow on specific events
on:
  fork:
    types: [created]
  pull_request:
    types: [opened, closed]
  push:
    branches:
      - '*'

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }} # Securely access Telegram Bot token
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }} # Securely access Telegram Chat ID
          GITHUB_EVENT: ${{ github.event_name }}
          PR_ACTION: ${{ github.event.action }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_BRANCH: ${{ github.ref_name }}
          GITHUB_COMMIT: ${{ github.sha }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # Debugging information to check variable values
          echo "Event Type: $GITHUB_EVENT"
          echo "Actor: $GITHUB_ACTOR"
          echo "Branch: $GITHUB_BRANCH"
          echo "Commit SHA: $GITHUB_COMMIT"
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Bot Token Length: ${#TELEGRAM_BOT_TOKEN}"  # Token length to confirm it's set
          echo "Chat ID: $TELEGRAM_CHAT_ID"

          # Determine message content based on the event type
          if [ "$GITHUB_EVENT" = "fork" ]; then
            MESSAGE="üöÄ *New Fork Created*\nUser: $GITHUB_ACTOR\nAction: Fork created by $GITHUB_ACTOR!"
          elif [ "$GITHUB_EVENT" = "pull_request" ] && [ "$PR_ACTION" = "opened" ]; then
            MESSAGE="üîÑ *Pull Request Opened*\nUser: $GITHUB_ACTOR\nAction: New pull request created\n[Link to PR](${{ github.event.pull_request.html_url }})"
          elif [ "$GITHUB_EVENT" = "pull_request" ] && [ "$PR_ACTION" = "closed" ]; then
            if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              MESSAGE="‚úÖ *Pull Request Merged*\nUser: $GITHUB_ACTOR\nAction: Pull request merged\n[Link to PR](${{ github.event.pull_request.html_url }})"
            else
              MESSAGE="‚ùå *Pull Request Closed*\nUser: $GITHUB_ACTOR\nAction: Pull request closed without merging\n[Link to PR](${{ github.event.pull_request.html_url }})"
            fi
          elif [ "$GITHUB_EVENT" = "push" ]; then
            MESSAGE="üöÄ *Code Pushed to Branch*\nUser: $GITHUB_ACTOR\nBranch: $GITHUB_BRANCH\nCommit: $GITHUB_COMMIT\nCommit Message: $COMMIT_MESSAGE\nAction: New code pushed by $GITHUB_ACTOR"
          elif [ "$GITHUB_EVENT" = "repository_dispatch" ] && [ "$DEPLOYMENT_STATE" = "SUCCEEDED" ]; then
            MESSAGE="üéâ *Vercel Deployment Succeeded*\nAction: Deployment was successful!"
          elif [ "$GITHUB_EVENT" = "repository_dispatch" ] && [ "$DEPLOYMENT_STATE" = "FAILED" ]; then
            MESSAGE="‚ö†Ô∏è *Vercel Deployment Failed*\nAction: Deployment encountered an error. Check logs for details."
          else
            MESSAGE="‚ÑπÔ∏è *Event Not Recognized*\nUser: $GITHUB_ACTOR\nAction: No recognized action taken."
          fi

          # Log the final message for debugging purposes
          echo "Formatted Message: $MESSAGE"

          # Send the message to Telegram
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
               -H "Content-Type: application/json" \
               -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$MESSAGE\", \"parse_mode\": \"Markdown\"}"
